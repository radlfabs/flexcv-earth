{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to flexcv-earth","text":"<p>See our repository here: flexcv-earth</p> <p>This python package provides wrapper classes for the <code>earth</code> function from the <code>earth</code> package in R. It then can be used as a sklearn estimator in python and especially in the <code>flexcv</code> package.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install flexcv_earth @ git+https://github.com/radlfabs/flexcv-earth\n</code></pre>"},{"location":"#additional-dependencies-of-rpy2","title":"Additional dependencies of <code>rpy2</code>","text":"<p>The model class for the <code>EarthRegressor</code> is actually wrapping around <code>rpy2</code> code and is using embedded <code>R</code> under the hood.  Therefore, you should have a recent <code>R</code> version installed and run our <code>install_rpackages.py</code> script.  From the command line change your directory to your <code>flexcv-earth</code> installation directory.  This can be your folder that you created with <code>venv</code>. Run our python script that installs the remaining R dependencies.</p> <pre><code>cd path/to/flexcv-earth/\npython -m install_rpackages\n</code></pre> <p>Now you have installed everything you need to use the <code>EarthRegressor</code>with flexcv-earth.</p>"},{"location":"#use-with-flexcv","title":"Use with flexcv","text":"<p>You can use <code>flexcv</code> to perform cross validation with the <code>EarthRegressor</code> class. Define a model configuration with yaml as follows:</p> <pre><code>from flexcv import CrossValidation\nfrom flexcv_earth import EarthRegressor, EarthModelPostProcessor\nfrom flexcv.synthesizer import generate_data\n\nX, y, _, _ = generate_data(10, 100)\n\nyaml_config = \"\"\"\nEarthRegressor:\n    requires_inner_cv: True\n    n_trials: 200\n    allows_n_jobs: False\n    model: EarthRegressor\n    params:\n        degree: !Int\n            low: 1\n            high: 5\n        nprune: !Int\n            low: 1\n            high: 300\n        fast_k: !Int\n            low: 0\n            high: 20\n        newvar_penalty: !Float\n            low: 0.01\n            high: 0.2\n    post_processor: EarthModelPostProcessor\n    add_merf: True\n\"\"\"\n\ncv = (\n    CrossValidation().set_data(X, y)\n    .set_models(yaml_strin=yaml_config)\n)\n</code></pre>"},{"location":"#reference","title":"Reference","text":""},{"location":"#flexcv_earth.models.EarthRegressor","title":"<code>flexcv_earth.models.EarthRegressor</code>","text":"<p>             Bases: <code>BaseEstimator</code>, <code>RegressorMixin</code></p> <p>Wrapper Class for Earth Regressor in R. For more Details see https://cran.r-project.org/web/packages/earth/earth.pdf.</p> <p>Parameters:</p> Name Type Description Default <code>degree</code> <code>int</code> <p>Degree of the splines. 1 for linear, 2 for quadratic, etc. (Default value = 1)</p> <code>1</code> <code>nprune</code> <code>int | None</code> <p>Number of pruning steps. If None, the number of pruning steps is determined by the algorithm. (Default value = None)</p> <code>None</code> <code>nk</code> <code>int | None</code> <p>Number of knots. If None, the number of knots is determined by the algorithm. The default is semi-automatically calculated from the number of predictors but may need adjusting. (Default value = None)</p> <code>None</code> <code>thresh</code> <code>float</code> <p>Forward stepping threshold. (Default value = 0.001)</p> <code>0.001</code> <code>minspan</code> <code>int</code> <p>Minimum number of observations between knots. (Default value = 0)</p> <code>0</code> <code>endspan</code> <code>int</code> <p>Minimum number of observations before the first and after the final knot. (Default value = 0)</p> <code>0</code> <code>newvar_penalty</code> <code>float</code> <p>(Default value = 0.0)</p> <code>0.0</code> <code>fast_k</code> <code>int</code> <p>Maximum number of parent terms considered at each step of the forward pass. (Default value = 20)</p> <code>20</code> <code>fast_beta</code> <code>float</code> <p>Fast MARS ageing coefficient, as described in the Fast MARS paper section 3.1. Default is 1. A value of 0 sometimes gives better results. (Default value = 1.0)</p> <code>1.0</code> <code>pmethod</code> <code>str</code> <p>Pruning method. One of: backward none exhaustive forward seqrep cv. Default is \"backward\". Specify pmethod=\"cv\" to use cross-validation to select the number of terms. This selects the number of terms that gives the maximum mean out-of-fold RSq on the fold models. Requires the nfold argument. Use \"none\" to retain all the terms created by the forward pass. If y has multiple columns, then only \"backward\" or \"none\" is allowed. Pruning can take a while if \"exhaustive\" is chosen and the model is big (more than about 30 terms). The current version of the leaps package used during pruning does not allow user interrupts (i.e., you have to kill your R session to interrupt; in Windows use the Task Manager or from the command line use taskkill). (Default value = \"backward\")</p> <code>'backward'</code> Source code in <code>flexcv_earth/models.py</code> <pre><code>class EarthRegressor(BaseEstimator, RegressorMixin):\n    \"\"\"Wrapper Class for Earth Regressor in R.\n    For more Details see https://cran.r-project.org/web/packages/earth/earth.pdf.\n\n    Args:\n        degree (int): Degree of the splines. 1 for linear, 2 for quadratic, etc. (Default value = 1)\n        nprune (int | None): Number of pruning steps. If None, the number of pruning steps is determined by the algorithm. (Default value = None)\n        nk (int | None): Number of knots. If None, the number of knots is determined by the algorithm. The default is semi-automatically calculated from the number of predictors but may need adjusting. (Default value = None)\n        thresh (float): Forward stepping threshold. (Default value = 0.001)\n        minspan (int): Minimum number of observations between knots. (Default value = 0)\n        endspan (int): Minimum number of observations before the first and after the final knot. (Default value = 0)\n        newvar_penalty (float): (Default value = 0.0)\n        fast_k (int): Maximum number of parent terms considered at each step of the forward pass. (Default value = 20)\n        fast_beta (float): Fast MARS ageing coefficient, as described in the Fast MARS paper section 3.1. Default is 1. A value of 0 sometimes gives better results. (Default value = 1.0)\n        pmethod (str): Pruning method. One of: backward none exhaustive forward seqrep cv. Default is \"backward\". Specify pmethod=\"cv\" to use cross-validation to select the number of terms. This selects the number of terms that gives the maximum mean out-of-fold RSq on the fold models. Requires the nfold argument. Use \"none\" to retain all the terms created by the forward pass. If y has multiple columns, then only \"backward\" or \"none\" is allowed. Pruning can take a while if \"exhaustive\" is chosen and the model is big (more than about 30 terms). The current version of the leaps package used during pruning does not allow user interrupts (i.e., you have to kill your R session to interrupt; in Windows use the Task Manager or from the command line use taskkill). (Default value = \"backward\")\n\n    \"\"\"\n\n    def __init__(\n        self,\n        degree: int = 1,\n        nprune: int = None,\n        nk: int = None,\n        thresh: float = 0.001,\n        minspan: int = 0,\n        endspan: int = 0,\n        newvar_penalty: float = 0.0,\n        fast_k: int = 20,\n        fast_beta: float = 1.0,\n        pmethod: str = \"backward\",\n        random_state: int = None,\n    ):\n        self.degree = degree\n        self.nprune = nprune\n        self.nk = nk\n        self.thresh = thresh\n        self.minspan = minspan\n        self.endspan = endspan\n        self.newvar_penalty = newvar_penalty\n        self.fast_k = fast_k\n        self.fast_beta = fast_beta\n        self.pmethod = pmethod\n        self.random_state = random_state\n\n    def fit(self, X, y):\n        \"\"\"Fit a EARTH model to the given training data.\n\n        Args:\n          X (array-like): Features.\n          y (array-like): Target values.\n\n        Returns:\n           (object): Returns self.\n        \"\"\"\n        if np.iscomplexobj(X) or np.iscomplexobj(y):\n            raise ValueError(\"Complex data not supported\")\n        # ro.r('sink(nullfile())')\n        if self.random_state is not None:\n            ro.r(f\"set.seed({self.random_state})\")\n\n        ro.r(\n            \"\"\"\n            library(earth)\n        \"\"\"\n        )\n        numpy2ri.activate()\n        pandas2ri.activate()\n\n        assert (\n            X.shape[0] == y.shape[0]\n        ), \"Number of X samples must match number of y samples.\"\n\n        # Convert X, y according to its type\n        if isinstance(X, pd.DataFrame):\n            # Convert pandas dataframe to R dataframe\n            r_X = pandas2ri.py2rpy(X)\n        elif isinstance(X, np.ndarray):\n            r_X = numpy2ri.numpy2rpy(X)\n            # Convert numpy array to R matrix\n        else:\n            r_X = ro.r.matrix(X, nrow=X.shape[0], ncol=X.shape[1])\n\n        # Convert pandas Series to R vector\n        r_y = ro.FloatVector(y)\n\n        # Fit MARS regression model using earth function from the earth package\n        # make nprune None in R as default\n        nprune = self.nprune if self.nprune is not None else ro.r(\"as.null\")()\n        # The following has a special defaults which we dont want to overwrite with None\n        nk = {\"nk\": self.nk} if self.nk is not None else {}\n        # We have to pass newvar.penalty as a named argument because Python does not allow \".\" in variable names\n        newvar_penalty = {\"newvar.penalty\": self.newvar_penalty}\n        fast_k = {\"fast.k\": self.fast_k}\n        fast_beta = {\"fast.beta\": self.fast_beta}\n\n        self.model_ = ro.r.earth(\n            r_X,\n            r_y,\n            degree=self.degree,\n            nprune=nprune,\n            thresh=self.thresh,\n            minspan=self.minspan,\n            endspan=self.endspan,\n            pmethod=self.pmethod,\n            **newvar_penalty,\n            **fast_k,\n            **fast_beta,\n            **nk,\n        )\n\n        self.is_fitted_ = True\n        self.var_imp_ = self.calc_variable_importance()\n\n        del r_X\n        del r_y\n        numpy2ri.deactivate()\n        pandas2ri.deactivate()\n\n        gc.collect()\n        ro.r(\"gc()\")\n        gc.collect()\n\n        return self\n\n    def predict(self, X):\n        \"\"\"Make predicitons using the fitted model.\n\n        Args:\n          X (array-like): Features\n\n        Returns:\n            (array-like): An array of fitted values.\n        \"\"\"\n        if np.iscomplexobj(X):\n            raise ValueError(\"Complex data not supported\")\n        ro.r(\n            \"\"\"\n            library(earth)\n        \"\"\"\n        )\n        numpy2ri.activate()\n        pandas2ri.activate()\n        # input checks\n        check_is_fitted(self)\n        if isinstance(X, pd.DataFrame):\n            # Convert pandas dataframe to R dataframe\n            r_X = pandas2ri.py2rpy(X)\n        elif isinstance(X, np.ndarray):\n            r_X = numpy2ri.numpy2rpy(X)\n            # Convert numpy array to R matrix\n        else:\n            r_X = ro.r.matrix(X, nrow=X.shape[0], ncol=X.shape[1])\n        # assign model in R in order to predict\n        # ro.r.assign(\"model\", self.model)\n        y_pred = np.asarray(ro.r[\"predict\"](self.model_, r_X))\n        # make sure that the output is a 1d array\n        y_pred = y_pred.ravel()\n        del r_X\n\n        numpy2ri.deactivate()\n        pandas2ri.deactivate()\n        gc.collect()\n        ro.r(\"gc()\")\n        gc.collect()\n\n        return y_pred\n\n    def __sklearn_is_fitted__(self):\n        return self.is_fitted_\n\n    def get_params(self, deep=False):\n        \"\"\"Returns the parameters of the model.\n\n        Args:\n          deep: bool: This argument is not used.  (Default value = False)\n        Returns:\n            (dict): Parameter names mapped to their values.\n        \"\"\"\n        return {\n            \"degree\": self.degree,\n            \"nprune\": self.nprune,\n            \"nk\": self.nk,\n            \"thresh\": self.thresh,\n            \"minspan\": self.minspan,\n            \"endspan\": self.endspan,\n            \"newvar_penalty\": self.newvar_penalty,\n            \"fast_k\": self.fast_k,\n            \"fast_beta\": self.fast_beta,\n            \"pmethod\": self.pmethod,\n            \"random_state\": self.random_state,\n        }\n\n    def get_rmodel(self):\n        \"\"\"Returns the R model object.\n\n        Returns:\n            (object): The R model object.\"\"\"\n        return self.model_\n\n    def make_r_plots(self):\n        \"\"\"Creates plots of the model in R and saves them to disk. They are saved to disk in the `tmp_imgs` folder.\"\"\"\n        Path(\"tmp_imgs\").mkdir(parents=True, exist_ok=True)\n        for i in range(1, 5):\n            ro.r[\"png\"](f\"tmp_imgs/mars_plot_{i}.png\", width=1024, height=1024)\n            ro.r[\"plot\"](self.model_, which=i)\n            ro.r[\"dev.off\"]()\n\n    def calc_variable_importance(self):\n        \"\"\"Calculates the variable importance of the model.\n\n        Returns:\n            (pandas.DataFrame): A DataFrame containing the variable importance.\"\"\"\n        ro.globalenv[\"ev\"] = ro.r[\"evimp\"](self.model_, trim=False)\n        imp = ro.r(\"as.data.frame(unclass(ev[,c(3,4,6)]))\")\n        imp_df: pd.DataFrame = ro.conversion.rpy2py(imp)\n        imp_df.columns = [\"nsubsets\", \"gcv\", \"rss\"]\n\n        del imp\n        gc.collect()\n        ro.r(\"rm(ev)\")\n        ro.r(\"gc()\")\n        gc.collect()\n        return imp_df\n\n    def get_variable_importance(self, features):\n        \"\"\"Returns the variable importance of the model.\n\n        Args:\n          features: array-like: The feature names.\n\n        Returns:\n            (pandas.DataFrame): A DataFrame containing the variable importance.\n        \"\"\"\n        self.var_imp_.index = features\n        return self.var_imp_\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.calc_variable_importance","title":"<code>flexcv_earth.models.EarthRegressor.calc_variable_importance()</code>","text":"<p>Calculates the variable importance of the model.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing the variable importance.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def calc_variable_importance(self):\n    \"\"\"Calculates the variable importance of the model.\n\n    Returns:\n        (pandas.DataFrame): A DataFrame containing the variable importance.\"\"\"\n    ro.globalenv[\"ev\"] = ro.r[\"evimp\"](self.model_, trim=False)\n    imp = ro.r(\"as.data.frame(unclass(ev[,c(3,4,6)]))\")\n    imp_df: pd.DataFrame = ro.conversion.rpy2py(imp)\n    imp_df.columns = [\"nsubsets\", \"gcv\", \"rss\"]\n\n    del imp\n    gc.collect()\n    ro.r(\"rm(ev)\")\n    ro.r(\"gc()\")\n    gc.collect()\n    return imp_df\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.fit","title":"<code>flexcv_earth.models.EarthRegressor.fit(X, y)</code>","text":"<p>Fit a EARTH model to the given training data.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>array - like</code> <p>Features.</p> required <code>y</code> <code>array - like</code> <p>Target values.</p> required <p>Returns:</p> Type Description <code>object</code> <p>Returns self.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def fit(self, X, y):\n    \"\"\"Fit a EARTH model to the given training data.\n\n    Args:\n      X (array-like): Features.\n      y (array-like): Target values.\n\n    Returns:\n       (object): Returns self.\n    \"\"\"\n    if np.iscomplexobj(X) or np.iscomplexobj(y):\n        raise ValueError(\"Complex data not supported\")\n    # ro.r('sink(nullfile())')\n    if self.random_state is not None:\n        ro.r(f\"set.seed({self.random_state})\")\n\n    ro.r(\n        \"\"\"\n        library(earth)\n    \"\"\"\n    )\n    numpy2ri.activate()\n    pandas2ri.activate()\n\n    assert (\n        X.shape[0] == y.shape[0]\n    ), \"Number of X samples must match number of y samples.\"\n\n    # Convert X, y according to its type\n    if isinstance(X, pd.DataFrame):\n        # Convert pandas dataframe to R dataframe\n        r_X = pandas2ri.py2rpy(X)\n    elif isinstance(X, np.ndarray):\n        r_X = numpy2ri.numpy2rpy(X)\n        # Convert numpy array to R matrix\n    else:\n        r_X = ro.r.matrix(X, nrow=X.shape[0], ncol=X.shape[1])\n\n    # Convert pandas Series to R vector\n    r_y = ro.FloatVector(y)\n\n    # Fit MARS regression model using earth function from the earth package\n    # make nprune None in R as default\n    nprune = self.nprune if self.nprune is not None else ro.r(\"as.null\")()\n    # The following has a special defaults which we dont want to overwrite with None\n    nk = {\"nk\": self.nk} if self.nk is not None else {}\n    # We have to pass newvar.penalty as a named argument because Python does not allow \".\" in variable names\n    newvar_penalty = {\"newvar.penalty\": self.newvar_penalty}\n    fast_k = {\"fast.k\": self.fast_k}\n    fast_beta = {\"fast.beta\": self.fast_beta}\n\n    self.model_ = ro.r.earth(\n        r_X,\n        r_y,\n        degree=self.degree,\n        nprune=nprune,\n        thresh=self.thresh,\n        minspan=self.minspan,\n        endspan=self.endspan,\n        pmethod=self.pmethod,\n        **newvar_penalty,\n        **fast_k,\n        **fast_beta,\n        **nk,\n    )\n\n    self.is_fitted_ = True\n    self.var_imp_ = self.calc_variable_importance()\n\n    del r_X\n    del r_y\n    numpy2ri.deactivate()\n    pandas2ri.deactivate()\n\n    gc.collect()\n    ro.r(\"gc()\")\n    gc.collect()\n\n    return self\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.get_params","title":"<code>flexcv_earth.models.EarthRegressor.get_params(deep=False)</code>","text":"<p>Returns the parameters of the model.</p> <p>Parameters:</p> Name Type Description Default <code>deep</code> <p>bool: This argument is not used.  (Default value = False)</p> <code>False</code> <p>Returns:     (dict): Parameter names mapped to their values.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def get_params(self, deep=False):\n    \"\"\"Returns the parameters of the model.\n\n    Args:\n      deep: bool: This argument is not used.  (Default value = False)\n    Returns:\n        (dict): Parameter names mapped to their values.\n    \"\"\"\n    return {\n        \"degree\": self.degree,\n        \"nprune\": self.nprune,\n        \"nk\": self.nk,\n        \"thresh\": self.thresh,\n        \"minspan\": self.minspan,\n        \"endspan\": self.endspan,\n        \"newvar_penalty\": self.newvar_penalty,\n        \"fast_k\": self.fast_k,\n        \"fast_beta\": self.fast_beta,\n        \"pmethod\": self.pmethod,\n        \"random_state\": self.random_state,\n    }\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.get_rmodel","title":"<code>flexcv_earth.models.EarthRegressor.get_rmodel()</code>","text":"<p>Returns the R model object.</p> <p>Returns:</p> Type Description <code>object</code> <p>The R model object.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def get_rmodel(self):\n    \"\"\"Returns the R model object.\n\n    Returns:\n        (object): The R model object.\"\"\"\n    return self.model_\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.get_variable_importance","title":"<code>flexcv_earth.models.EarthRegressor.get_variable_importance(features)</code>","text":"<p>Returns the variable importance of the model.</p> <p>Parameters:</p> Name Type Description Default <code>features</code> <p>array-like: The feature names.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing the variable importance.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def get_variable_importance(self, features):\n    \"\"\"Returns the variable importance of the model.\n\n    Args:\n      features: array-like: The feature names.\n\n    Returns:\n        (pandas.DataFrame): A DataFrame containing the variable importance.\n    \"\"\"\n    self.var_imp_.index = features\n    return self.var_imp_\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.make_r_plots","title":"<code>flexcv_earth.models.EarthRegressor.make_r_plots()</code>","text":"<p>Creates plots of the model in R and saves them to disk. They are saved to disk in the <code>tmp_imgs</code> folder.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def make_r_plots(self):\n    \"\"\"Creates plots of the model in R and saves them to disk. They are saved to disk in the `tmp_imgs` folder.\"\"\"\n    Path(\"tmp_imgs\").mkdir(parents=True, exist_ok=True)\n    for i in range(1, 5):\n        ro.r[\"png\"](f\"tmp_imgs/mars_plot_{i}.png\", width=1024, height=1024)\n        ro.r[\"plot\"](self.model_, which=i)\n        ro.r[\"dev.off\"]()\n</code></pre>"},{"location":"#flexcv_earth.models.EarthRegressor.predict","title":"<code>flexcv_earth.models.EarthRegressor.predict(X)</code>","text":"<p>Make predicitons using the fitted model.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>array - like</code> <p>Features</p> required <p>Returns:</p> Type Description <code>array - like</code> <p>An array of fitted values.</p> Source code in <code>flexcv_earth/models.py</code> <pre><code>def predict(self, X):\n    \"\"\"Make predicitons using the fitted model.\n\n    Args:\n      X (array-like): Features\n\n    Returns:\n        (array-like): An array of fitted values.\n    \"\"\"\n    if np.iscomplexobj(X):\n        raise ValueError(\"Complex data not supported\")\n    ro.r(\n        \"\"\"\n        library(earth)\n    \"\"\"\n    )\n    numpy2ri.activate()\n    pandas2ri.activate()\n    # input checks\n    check_is_fitted(self)\n    if isinstance(X, pd.DataFrame):\n        # Convert pandas dataframe to R dataframe\n        r_X = pandas2ri.py2rpy(X)\n    elif isinstance(X, np.ndarray):\n        r_X = numpy2ri.numpy2rpy(X)\n        # Convert numpy array to R matrix\n    else:\n        r_X = ro.r.matrix(X, nrow=X.shape[0], ncol=X.shape[1])\n    # assign model in R in order to predict\n    # ro.r.assign(\"model\", self.model)\n    y_pred = np.asarray(ro.r[\"predict\"](self.model_, r_X))\n    # make sure that the output is a 1d array\n    y_pred = y_pred.ravel()\n    del r_X\n\n    numpy2ri.deactivate()\n    pandas2ri.deactivate()\n    gc.collect()\n    ro.r(\"gc()\")\n    gc.collect()\n\n    return y_pred\n</code></pre>"},{"location":"#flexcv_earth.model_postprocessing.EarthModelPostProcessor","title":"<code>flexcv_earth.model_postprocessing.EarthModelPostProcessor</code>","text":"Source code in <code>flexcv_earth/model_postprocessing.py</code> <pre><code>class EarthModelPostProcessor():\n    def __init__(self):\n        super().__init__()\n\n    def __call__(self, results_all_folds, fold_result, features, run, *args, **kwargs):\n        \"\"\"Postprocessing function for the MARS model.\n        Logs the parameters to Neptune.\n        Creates a variable importance table and logs barplots to neptune.\n\n        Args:\n            results_all_folds: A dict of results for all folds\n            fold_result: A dataclass containing the results for the current fold\n            features: list of features\n            run: neptune run object\n            *args: any additional arguments\n            **kwargs: any additional keyword arguments\n\n        Returns:\n            (dict): updated results dictionary\n        \"\"\"\n        with plt.style.context(\"ggplot\"):\n            imp_df: pd.DataFrame = fold_result.best_model.get_variable_importance(features)\n            run[f\"{fold_result.model_name}/FeatImportance/Table\"].append(File.as_html(imp_df))\n            for col in imp_df.columns:\n                # plot all rows of col where col is not 0\n                fig = plt.figure()\n                tmp = imp_df[col]\n                tmp = tmp[tmp != 0]\n                try:\n                    tmp.plot.barh()\n                    plt.title(f\"{col} Variable Importance\")\n                    run[f\"{fold_result.model_name}/FeatImportance/\"].append(fig)\n                except Exception as e:\n                    logger.info(f\"{e}\")\n                    logger.info(f\"Could not make barplot for {fold_result.model_name}. Continuing.\")\n                del fig\n                plt.close()\n\n            run[f\"{fold_result.model_name}/BestParams\"].append(\n                pformat(fold_result.best_params)\n            )\n\n        return results_all_folds\n</code></pre>"},{"location":"#flexcv_earth.model_postprocessing.EarthModelPostProcessor.__call__","title":"<code>flexcv_earth.model_postprocessing.EarthModelPostProcessor.__call__(results_all_folds, fold_result, features, run, *args, **kwargs)</code>","text":"<p>Postprocessing function for the MARS model. Logs the parameters to Neptune. Creates a variable importance table and logs barplots to neptune.</p> <p>Parameters:</p> Name Type Description Default <code>results_all_folds</code> <p>A dict of results for all folds</p> required <code>fold_result</code> <p>A dataclass containing the results for the current fold</p> required <code>features</code> <p>list of features</p> required <code>run</code> <p>neptune run object</p> required <code>*args</code> <p>any additional arguments</p> <code>()</code> <code>**kwargs</code> <p>any additional keyword arguments</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>updated results dictionary</p> Source code in <code>flexcv_earth/model_postprocessing.py</code> <pre><code>def __call__(self, results_all_folds, fold_result, features, run, *args, **kwargs):\n    \"\"\"Postprocessing function for the MARS model.\n    Logs the parameters to Neptune.\n    Creates a variable importance table and logs barplots to neptune.\n\n    Args:\n        results_all_folds: A dict of results for all folds\n        fold_result: A dataclass containing the results for the current fold\n        features: list of features\n        run: neptune run object\n        *args: any additional arguments\n        **kwargs: any additional keyword arguments\n\n    Returns:\n        (dict): updated results dictionary\n    \"\"\"\n    with plt.style.context(\"ggplot\"):\n        imp_df: pd.DataFrame = fold_result.best_model.get_variable_importance(features)\n        run[f\"{fold_result.model_name}/FeatImportance/Table\"].append(File.as_html(imp_df))\n        for col in imp_df.columns:\n            # plot all rows of col where col is not 0\n            fig = plt.figure()\n            tmp = imp_df[col]\n            tmp = tmp[tmp != 0]\n            try:\n                tmp.plot.barh()\n                plt.title(f\"{col} Variable Importance\")\n                run[f\"{fold_result.model_name}/FeatImportance/\"].append(fig)\n            except Exception as e:\n                logger.info(f\"{e}\")\n                logger.info(f\"Could not make barplot for {fold_result.model_name}. Continuing.\")\n            del fig\n            plt.close()\n\n        run[f\"{fold_result.model_name}/BestParams\"].append(\n            pformat(fold_result.best_params)\n        )\n\n    return results_all_folds\n</code></pre>"}]}